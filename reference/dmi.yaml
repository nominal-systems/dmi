openapi: 3.0.0
x-stoplight:
  id: 545mk2dwwzqkv
info:
  title: dmi
  version: 0.1.0
servers:
  - url: 'http://localhost:4010'
    description: Local Mock Server
paths:
  /users:
    post:
      summary: Create a user
      operationId: post-users
      description: Create a new User.
      requestBody:
        $ref: './requestBodies/UserCredentialsBody.yaml'
      responses:
        '201':
          $ref: './responses/UserCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Email Already Taken
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
    get:
      summary: List all users
      operationId: get-users
      description: Get all Users.
      responses:
        '200':
          $ref: './responses/UserList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
  /users/{userId}:
    parameters:
      - $ref: './parameters/userId.yaml'
    get:
      summary: Get a user by ID
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      responses:
        '200':
          $ref: './responses/UserFound.yaml'
        '404':
          description: User Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
  /users/auth:
    post:
      summary: Log in
      operationId: post-users-auth
      description: Login the user with the matching email and password.
      requestBody:
        $ref: './requestBodies/UserCredentialsBody.yaml'
      responses:
        '200':
          $ref: './responses/AuthTokenIssued.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Users
  /users/me:
    get:
      summary: Get user details
      operationId: get-users-me
      description: Retrieve the information of the logged in user.
      responses:
        '200':
          $ref: './responses/UserFound.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Users
  /users/me/password:
    put:
      summary: Change password
      operationId: put-users-me-password
      description: Update the password of the logged in user.
      requestBody:
        $ref: './requestBodies/UserPasswordBody.yaml'
      responses:
        '200':
          description: Password Updated
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Users
  /organizations:
    post:
      summary: Create an organization
      operationId: post-organizations
      description: Create a new Organization.
      requestBody:
        $ref: './requestBodies/OrganizationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrganizationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '409':
          description: Organization name already taken.
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}:
    parameters:
      - $ref: './parameters/organizationId.yaml'
    get:
      summary: Get an organization by ID
      operationId: get-organizations-organizationId
      description: Retrieve the information of the organization with the matching organization ID.
      responses:
        '200':
          $ref: './responses/OrganizationFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}/keys:
    parameters:
      - $ref: './parameters/organizationId.yaml'
    get:
      summary: Get organization API keys
      operationId: get-organizations-organizationId-keys
      description: Retrieve the API keys of the organization with the matching organization ID.
      responses:
        '200':
          $ref: './responses/OrganizationKeysFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Organizations
    put:
      summary: Regenerate organization API keys
      operationId: put-organizations-organizationId-keys
      description: Regenerate the API keys of the organization with the matching organization ID.
      responses:
        '200':
          $ref: './responses/OrganizationKeysFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Organizations
  /organizations/{organizationId}/members:
    parameters:
      - $ref: './parameters/organizationId.yaml'
    post:
      summary: Add member to an organization
      operationId: post-organizations-organizationId-members
      description: Add a new member to the organization with the matching organization ID.
      requestBody:
        $ref: './requestBodies/OrganizationMemberCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrganizationFound.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '404':
          description: Organization Not Found
        '409':
          description: User already a member of the organization.
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /practices:
    post:
      summary: Create a new Practice
      operationId: post-practices
      description: Create a new Practice.
      requestBody:
        $ref: './requestBodies/PracticeCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/PracticeCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Practice name already taken.
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
    get:
      summary: List all practices
      operationId: get-practices
      description: Retrieve all practices.
      responses:
        '200':
          $ref: './responses/PracticeList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
  /practices/{practiceId}:
    parameters:
      - $ref: './parameters/practiceId.yaml'
    get:
      summary: Get a practice by ID
      operationId: get-practices-practiceId
      description: Retrieve the practice with the matching practice ID.
      responses:
        '200':
          $ref: './responses/PracticeFound.yaml'
        '404':
          description: Practice Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
    delete:
      summary: Delete a practice
      operationId: delete-practices-practiceId
      description: Delete the practice with the matching practice ID.
      responses:
        '204':
          description: Practice deleted
        '404':
          description: Practice Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
  /providers:
    get:
      summary: List available diagnostic providers
      operationId: get-providers
      description: Retrieve all available diagnostic providers.
      responses:
        '200':
          $ref: './responses/ProviderList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}:
    parameters:
      - $ref: './parameters/providerId.yaml'
    get:
      summary: Get a diagnostic provider
      operationId: get-providers-providerId
      description: Retrieve the diagnostic provider with the matching provider ID.
      responses:
        '200':
          $ref: './responses/ProviderFound.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/configurations:
    parameters:
      - $ref: './parameters/providerId.yaml'
    get:
      summary: List all configurations for a diagnostic provider
      operationId: get-providers-providerId-configurations
      description: Retrieve the configurations for the specified provider.
      responses:
        '200':
          $ref: './responses/ProviderConfigurationList.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
    post:
      summary: Configure a diagnostic provider
      operationId: post-providers-providerId-configurations
      description: Create a new configuration for a diagnostic provider by specifying an options object.
      requestBody:
        $ref: './requestBodies/ProviderConfigurationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/ProviderConfigurationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/services:
    parameters:
      - $ref: './parameters/providerId.yaml'
      - $ref: './parameters/query/integration_id.yaml'
    get:
      summary: Get directory of services for a diagnostic provider
      operationId: get-providers-providerId-services
      description: Retrieve the directory of services for the specified provider and configured integration.
      responses:
        '200':
          $ref: './responses/ProviderServiceList.yaml'
        '404':
          description: Integration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Directory of services
  /providers/{providerId}/devices:
    parameters:
      - $ref: './parameters/providerId.yaml'
    get:
      summary: List provider devices
      operationId: get-providers-providerId-devices
      description: Retrieve the devices for the specified provider.
      responses:
        '200':
          $ref: './responses/ProviderDeviceList.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/configurations/{configurationId}:
    parameters:
      - $ref: './parameters/providerId.yaml'
      - $ref: './parameters/configurationId.yaml'
    get:
      summary: Get a configuration for a provider
      operationId: get-providers-providerId-configurations-configurationId
      description: Retrieve the configuration with the matching configuration ID for the specified provider.
      responses:
        '200':
          $ref: './responses/ProviderConfigurationFound.yaml'
        '404':
          description: Provider Configuration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
    delete:
      summary: Delete a configuration for a provider
      operationId: delete-providers-providerId-configurations-configurationId
      description: Remove a configuration from a provider.
      responses:
        '204':
          description: Configuration Deleted
        '404':
          description: Provider Configuration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
  /integrations:
    post:
      summary: Create a diagnostic provider integration
      operationId: post-integrations
      description: Create a new diagnostic provider integration for a practice with a provider configuration.
      requestBody:
        $ref: './requestBodies/IntegrationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/IntegrationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Integrations
    get:
      summary: List all diagnostic provider integrations
      operationId: get-integrations
      description: Retrieve the diagnostic provider integrations.
      responses:
        '200':
          $ref: './responses/IntegrationList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Integrations
  /integrations/{integrationId}:
    parameters:
      - $ref: './parameters/integrationId.yaml'
    get:
      summary: Get a diagnostic provider integration
      operationId: get-integrations-integrationId
      description: Retrieve the diagnostic provider integration with the matching integration ID.
      responses:
        '200':
          $ref: './responses/IntegrationFound.yaml'
        '404':
          description: Integration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Integrations
    delete:
      summary: Delete a diagnostic provider integration
      operationId: delete-integrations-integrationId
      description: Remove a diagnostic provider integration.
      responses:
        '204':
          description: Integration Deleted
        '404':
          description: Integration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Integrations
  /orders:
    post:
      summary: Create an order
      operationId: post-orders
      description: Create a test order for a patient.
      requestBody:
        $ref: './requestBodies/OrderCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrderCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
    get:
      summary: Search orders
      operationId: get-orders
      description: Retrieve the orders that match the search criteria.
      parameters:
        - $ref: './parameters/query/date_start.yaml'
        - $ref: './parameters/query/date_end.yaml'
        - $ref: './parameters/query/provider_id.yaml'
        - $ref: './parameters/query/order_status.yaml'
      responses:
        '200':
          $ref: './responses/OrderList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
  /orders/{orderId}:
    parameters:
      - $ref: './parameters/orderId.yaml'
    get:
      summary: Get an order
      operationId: get-orders-orderId
      description: Retrieve the order with the matching order ID.
      responses:
        '200':
          $ref: './responses/OrderFound.yaml'
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
    delete:
      summary: Cancel an order
      operationId: delete-orders-orderId
      description: Cancel the order with the matching order ID.
      responses:
        '204':
          description: Order Deleted
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
  /orders/{orderId}/report.json:
    parameters:
      - $ref: './parameters/orderId.yaml'
    get:
      summary: Get an order result
      operationId: get-orders-orderId-result
      description: Retrieve the order result with the matching order ID.
      responses:
        '200':
          $ref: './responses/OrderReport.yaml'
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
  /orders/{orderId}/tests:
    post:
      summary: Add tests to an existing order
      operationId: post-orders-orderId-tests
      description: Add a test for the order with the matching order ID.
      requestBody:
        $ref: './requestBodies/TestCodes.yaml'
      responses:
        '202':
          $ref: './responses/202Accepted.yaml'
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Test code already in order
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
  /orders/{orderId}/tests/{testCode}:
    delete:
      summary: Cancel a specific test
      operationId: delete-orders-orderId-tests-testCode
      description: Cancel the test with the matching test code from the order with the matching order ID.
      parameters:
        - $ref: './parameters/orderId.yaml'
        - $ref: './parameters/testCode.yaml'
      responses:
        '204':
          description: Test removed
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Test code not in order
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Orders and results
  /refs/sexes:
    get:
      summary: Get the list of accepted sex codes
      operationId: get-refs-sexes
      description: Retrieve the list of the accepted sex codes, along with the list hash
      responses:
        '200':
          $ref: './responses/SexesList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Reference data
  /refs/species:
    get:
      summary: Get the list of accepted species codes
      operationId: get-refs-species
      description: Retrieve the list of the accepted species codes, along with the list hash
      responses:
        '200':
          $ref: './responses/SpeciesList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Reference data
  /refs/breeds:
    get:
      summary: Get the list of accepted breeds
      operationId: get-refs-breeds
      description: Retrieve the list of the accepted breeds, along with the list hash
      responses:
        '200':
          $ref: './responses/BreedsList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Reference data
  /events:
    get:
      summary: Get the list of events
      operationId: get-events
      description: Retrieve the list of the events, along with the list hash
      parameters:
        - $ref: './parameters/query/start_seq.yaml'
        - $ref: './parameters/query/date_start.yaml'
        - $ref: './parameters/query/date_end.yaml'
        - $ref: './parameters/query/practice_id.yaml'
      responses:
        '200':
          $ref: './responses/EventList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Events
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
