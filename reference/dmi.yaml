openapi: 3.0.0
x-stoplight:
  id: 545mk2dwwzqkv
info:
  title: DMI API
  version: 0.1.0
  description: |
    # Diagnostic Modality Integration API
    The Diagnostic Modality Integration API is organized around REST, has predictable resource-oriented URLs, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
    
    You can use the DMI API is test mode (with the test API keys) which doesn't affect your real data or generates any real interaction with diagnostic modality providers.
    
    ## Authentication
    The DMI API use API keys to authenticate requests for most operations. You can [view](https://nominal.stoplight.io/docs/dmi/856061bdc3bcf-get-organization-api-keys) and [regenerate](https://nominal.stoplight.io/docs/dmi/0284e6090ecf0-regenerate-organization-api-keys) your API keys using the Organization endpoints.
    
    Organization management is secured using the [JWT Bearer Auth](https://jwt.io/introduction), and users are provisioned by an admin user with server provided credentials using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication).
servers:
  - url: 'http://localhost:4010'
    description: Local Mock Server
paths:
  /users:
    post:
      summary: Create a user
      operationId: post-users
      description: Create a new User.
      requestBody:
        $ref: './requestBodies/UserCredentialsBody.yaml'
      responses:
        '201':
          $ref: './responses/UserCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Email Already Taken
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
    get:
      summary: List all users
      operationId: get-users
      description: Get all Users.
      responses:
        '200':
          $ref: './responses/UserList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
  /users/{userId}:
    get:
      summary: Get a user by ID
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      parameters:
        - $ref: './parameters/userId.yaml'
      responses:
        '200':
          $ref: './responses/UserFound.yaml'
        '404':
          description: User Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
  /users/auth:
    post:
      summary: Log in
      operationId: post-users-auth
      description: Login the user with the matching email and password.
      requestBody:
        $ref: './requestBodies/UserCredentialsBody.yaml'
      responses:
        '200':
          $ref: './responses/AuthTokenIssued.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Users
  /users/me:
    get:
      summary: Get user details
      operationId: get-users-me
      description: Retrieve the information of the logged in user.
      responses:
        '200':
          $ref: './responses/UserFound.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Users
  /users/me/password:
    put:
      summary: Change password
      operationId: put-users-me-password
      description: Update the password of the logged in user.
      requestBody:
        $ref: './requestBodies/UserPasswordBody.yaml'
      responses:
        '200':
          description: Password Updated
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Users
  /organizations:
    post:
      summary: Create an organization
      operationId: post-organizations
      description: Create a new Organization.
      requestBody:
        $ref: './requestBodies/OrganizationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrganizationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '409':
          description: Organization name already taken.
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}:
    get:
      summary: Get an organization by ID
      operationId: get-organizations-organizationId
      description: Retrieve the information of the organization with the matching organization ID.
      parameters:
        - $ref: './parameters/organizationId.yaml'
      responses:
        '200':
          $ref: './responses/OrganizationFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}/keys:
    get:
      summary: Get organization API keys
      operationId: get-organizations-organizationId-keys
      description: Retrieve the API keys of the organization with the matching organization ID.
      parameters:
        - $ref: './parameters/organizationId.yaml'
      responses:
        '200':
          $ref: './responses/OrganizationKeysFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
    put:
      summary: Regenerate organization API keys
      operationId: put-organizations-organizationId-keys
      description: Regenerate the API keys of the organization with the matching organization ID.
      parameters:
        - $ref: './parameters/organizationId.yaml'
      responses:
        '200':
          $ref: './responses/OrganizationKeysFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}/members:
    post:
      summary: Add member to an organization
      operationId: post-organizations-organizationId-members
      description: Add a new member to the organization with the matching organization ID.
      parameters:
        - $ref: './parameters/organizationId.yaml'
      requestBody:
        $ref: './requestBodies/OrganizationMemberCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrganizationFound.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '404':
          description: Organization Not Found
        '409':
          description: User already a member of the organization.
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /practices:
    post:
      summary: Create a new Practice
      operationId: post-practices
      description: Create a new Practice.
      requestBody:
        $ref: './requestBodies/PracticeCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/PracticeCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Practice name already taken.
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Practices
    get:
      summary: List all practices
      operationId: get-practices
      description: Retrieve all practices.
      responses:
        '200':
          $ref: './responses/PracticeList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Practices
  /practices/{practiceId}:
    get:
      summary: Get a practice by ID
      operationId: get-practices-practiceId
      description: Retrieve the practice with the matching practice ID.
      parameters:
        - $ref: './parameters/practiceId.yaml'
      responses:
        '200':
          $ref: './responses/PracticeFound.yaml'
        '404':
          description: Practice Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Practices
    delete:
      summary: Delete a practice
      operationId: delete-practices-practiceId
      description: Delete the practice with the matching practice ID.
      parameters:
        - $ref: './parameters/practiceId.yaml'
      responses:
        '204':
          description: Practice deleted
        '404':
          description: Practice Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Practices
  /providers:
    get:
      summary: List available diagnostic providers
      operationId: get-providers
      description: Retrieve all available diagnostic providers.
      responses:
        '200':
          $ref: './responses/ProviderList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}:
    get:
      summary: Get a diagnostic provider
      operationId: get-providers-providerId
      description: Retrieve the diagnostic provider with the matching provider ID.
      parameters:
        - $ref: './parameters/providerId.yaml'
      responses:
        '200':
          $ref: './responses/ProviderFound.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/configurations:
    get:
      summary: List all configurations for a diagnostic provider
      operationId: get-providers-providerId-configurations
      description: Retrieve the configurations for the specified provider.
      parameters:
        - $ref: './parameters/providerId.yaml'
      responses:
        '200':
          $ref: './responses/ProviderConfigurationList.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
    post:
      summary: Configure a diagnostic provider
      operationId: post-providers-providerId-configurations
      description: Create a new configuration for a diagnostic provider by specifying an options object.
      parameters:
        - $ref: './parameters/providerId.yaml'
      requestBody:
        $ref: './requestBodies/ProviderConfigurationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/ProviderConfigurationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/services:
    get:
      summary: Get directory of services for a diagnostic provider
      operationId: get-providers-providerId-services
      description: Retrieve the directory of services for the specified provider and configured integration.
      parameters:
        - $ref: './parameters/providerId.yaml'
        - $ref: './parameters/query/integration_id.yaml'
      responses:
        '200':
          $ref: './responses/ProviderServiceList.yaml'
        '404':
          description: Integration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Directory of services
  /providers/{providerId}/devices:
    get:
      summary: List provider devices
      operationId: get-providers-providerId-devices
      description: Retrieve the devices for the specified provider.
      parameters:
        - $ref: './parameters/providerId.yaml'
      responses:
        '200':
          $ref: './responses/ProviderDeviceList.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/configurations/{configurationId}:
    get:
      summary: Get a configuration for a provider
      operationId: get-providers-providerId-configurations-configurationId
      description: Retrieve the configuration with the matching configuration ID for the specified provider.
      parameters:
        - $ref: './parameters/providerId.yaml'
        - $ref: './parameters/configurationId.yaml'
      responses:
        '200':
          $ref: './responses/ProviderConfigurationFound.yaml'
        '404':
          description: Provider Configuration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
    delete:
      summary: Delete a configuration for a provider
      operationId: delete-providers-providerId-configurations-configurationId
      description: Remove a configuration from a provider.
      parameters:
        - $ref: './parameters/providerId.yaml'
        - $ref: './parameters/configurationId.yaml'
      responses:
        '204':
          description: Configuration Deleted
        '404':
          description: Provider Configuration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Providers
  /integrations:
    post:
      summary: Create a diagnostic provider integration
      operationId: post-integrations
      description: Create a new diagnostic provider integration for a practice with a provider configuration.
      requestBody:
        $ref: './requestBodies/IntegrationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/IntegrationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Integrations
    get:
      summary: List all diagnostic provider integrations
      operationId: get-integrations
      description: Retrieve the diagnostic provider integrations.
      responses:
        '200':
          $ref: './responses/IntegrationList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Integrations
  /integrations/{integrationId}:
    get:
      summary: Get a diagnostic provider integration
      operationId: get-integrations-integrationId
      description: Retrieve the diagnostic provider integration with the matching integration ID.
      parameters:
        - $ref: './parameters/integrationId.yaml'
      responses:
        '200':
          $ref: './responses/IntegrationFound.yaml'
        '404':
          description: Integration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Integrations
    delete:
      summary: Delete a diagnostic provider integration
      operationId: delete-integrations-integrationId
      description: Remove a diagnostic provider integration.
      parameters:
        - $ref: './parameters/integrationId.yaml'
      responses:
        '204':
          description: Integration Deleted
        '404':
          description: Integration Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Integrations
  /orders:
    post:
      summary: Create an order
      operationId: post-orders
      description: Create a test order for a patient.
      requestBody:
        $ref: './requestBodies/OrderCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrderCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
    get:
      summary: Search orders
      operationId: get-orders
      description: Retrieve the orders that match the search criteria.
      parameters:
        - $ref: './parameters/query/date_start.yaml'
        - $ref: './parameters/query/date_end.yaml'
        - $ref: './parameters/query/provider_id.yaml'
        - $ref: './parameters/query/order_status.yaml'
      responses:
        '200':
          $ref: './responses/OrderList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
  /orders/{orderId}:
    get:
      summary: Get an order
      operationId: get-orders-orderId
      description: Retrieve the order with the matching order ID.
      parameters:
        - $ref: './parameters/orderId.yaml'
      responses:
        '200':
          $ref: './responses/OrderFound.yaml'
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
    delete:
      summary: Cancel an order
      operationId: delete-orders-orderId
      description: Cancel the order with the matching order ID.
      parameters:
        - $ref: './parameters/orderId.yaml'
      responses:
        '204':
          description: Order Deleted
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
  /orders/{orderId}/report:
    get:
      summary: Get the report for an order
      operationId: get-orders-orderId-report
      description: Retrieve the report for and with the matching order ID.
      parameters:
        - $ref: './parameters/orderId.yaml'
      responses:
        '200':
          $ref: './responses/OrderReport.yaml'
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
  /orders/urinalysis/report:
    get:
      summary: Urinalysis report
      operationId: get-orders-urinalysis-report
      description: |
        Retrieve a sample report containing a urinalysis test.
        
        *Please note that this endpoint is for development purposes only and will not be part of the initial release.*
      responses:
        '200':
          description: Sample Urinalysis Report
          content:
            application/json:
              schema:
                $ref: './schemas/Report.yaml'
              examples:
                Chemistry:
                  $ref: './examples/Report.yaml#/Urinalysis'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Examples
  /orders/chemistry/report:
    get:
      summary: Chemistry report
      operationId: get-orders-chemistry-report
      description: |
        Retrieve a sample report containing a chemistry test.
        
        *Please note that this endpoint is for development purposes only and will not be part of the initial release.*
      responses:
        '200':
          description: Sample Chemistry Report
          content:
            application/json:
              schema:
                $ref: './schemas/Report.yaml'
              examples:
                Chemistry:
                  $ref: './examples/Report.yaml#/Chemistry'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Examples
  /orders/hematology/report:
    get:
      summary: Hematology report
      operationId: get-orders-hematology-report
      description: |
        Retrieve a sample report containing an hematology test.
        
        *Please note that this endpoint is for development purposes only and will not be part of the initial release.*
      responses:
        '200':
          description: Sample Hematology Report
          content:
            application/json:
              schema:
                $ref: './schemas/Report.yaml'
              examples:
                Chemistry:
                  $ref: './examples/Report.yaml#/Hematology'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Examples
  /orders/screening/report:
    get:
      summary: Screening report
      operationId: get-orders-screening-report
      description: |
        Retrieve a sample report for a full adult screening. The report includes a provider PDF.
        
        *Please note that this endpoint is for development purposes only and will not be part of the initial release.*
      responses:
        '200':
          description: Sample Screening Report
          content:
            application/json:
              schema:
                $ref: './schemas/Report.yaml'
              examples:
                Chemistry:
                  $ref: './examples/Report.yaml#/Screening'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Examples
  /orders/{orderId}/tests:
    post:
      summary: Add tests to an existing order
      operationId: post-orders-orderId-tests
      description: Add a test for the order with the matching order ID.
      requestBody:
        $ref: './requestBodies/TestCodes.yaml'
      responses:
        '202':
          $ref: './responses/202Accepted.yaml'
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Test code already in order
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
  /orders/{orderId}/tests/{testCode}:
    delete:
      summary: Cancel a specific test
      operationId: delete-orders-orderId-tests-testCode
      description: Cancel the test with the matching test code from the order with the matching order ID.
      parameters:
        - $ref: './parameters/orderId.yaml'
        - $ref: './parameters/testCode.yaml'
      responses:
        '204':
          description: Test removed
        '404':
          description: Order Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Test code not in order
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
  /reports/{reportId}:
    get:
      summary: Get a report by ID
      operationId: get-reports-reportId
      description: Retrieve the report with the matching report ID.
      parameters:
        - $ref: './parameters/reportId.yaml'
      responses:
          '200':
            $ref: './responses/ReportFound.yaml'
          '404':
            description: Report Not Found
          '401':
            $ref: './responses/401Unauthorized.yaml'
          '403':
            $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Orders & Results
  /refs/sexes:
    get:
      summary: Get the list of accepted sex codes
      operationId: get-refs-sexes
      description: Retrieve the list of the accepted sex codes, along with the list hash
      responses:
        '200':
          $ref: './responses/SexesList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Reference data
  /refs/species:
    get:
      summary: Get the list of accepted species codes
      operationId: get-refs-species
      description: Retrieve the list of the accepted species codes, along with the list hash
      responses:
        '200':
          $ref: './responses/SpeciesList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Reference data
  /refs/breeds:
    get:
      summary: Get the list of accepted breeds
      operationId: get-refs-breeds
      description: Retrieve the list of the accepted breeds, along with the list hash
      responses:
        '200':
          $ref: './responses/BreedsList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Reference data
  /events:
    get:
      summary: Search events
      operationId: get-events
      description: Search for events that match the search criteria.
      parameters:
        - $ref: './parameters/query/date_start.yaml'
        - $ref: './parameters/query/date_end.yaml'
        - $ref: './parameters/query/event_type.yaml'
      responses:
        '200':
          $ref: './responses/EventList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Events
  /event-subscriptions:
    post:
      summary: Create an event subscription
      operationId: post-event-subscriptions
      description: Subscribe to a specific event type.
      requestBody:
        $ref: './requestBodies/EventSubscriptionCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/EventSubscriptionCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Events
  /event-subscriptions/{subscriptionId}:
    get:
      summary: Get an event subscription details
      operationId: get-event-subscriptions-subscriptionId
      description: Retrieve the event subscription with the matching subscription ID.
      parameters:
        - $ref: './parameters/subscriptionId.yaml'
      responses:
        '200':
          $ref: './responses/EventSubscriptionFound.yaml'
        '404':
          description: Subscription Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Events
    delete:
      summary: Cancel an event subscription
      operationId: delete-event-subscriptions-subscriptionId
      parameters:
        - $ref: './parameters/subscriptionId.yaml'
      responses:
        '204':
          description: Subscription cancelled
        '404':
          description: Subscription Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Events
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
tags:
  - name: Admin
  - name: Users
  - name: Organizations
  - name: Practices
  - name: Providers
  - name: Integrations
  - name: Directory of services
  - name: Reference data
  - name: Orders & Results
  - name: Events
  - name: Examples
