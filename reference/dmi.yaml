openapi: 3.0.0
x-stoplight:
  id: 545mk2dwwzqkv
info:
  title: dmi
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Local
  - url: 'https://stoplight.io/mocks/nominal/dmi/57735574'
    description: Mock Server
paths:
  /users:
    post:
      summary: Creates a new User
      operationId: post-user
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Example User:
                  $ref: '#/components/examples/UserExample'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Create User Alice Smith:
                $ref: '#/components/examples/UserExample'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      security:
        - BasicAuth: [ ]
      tags:
        - Users
    parameters: [ ]
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get User by ID
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  $ref: '#/components/examples/UserExample'
        '404':
          description: User Not Found
        '401':
          $ref: '#/components/responses/401Unauthorized'
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      security:
        - BearerAuth: [ ]
      tags:
        - Users
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - $ref: '#/components/examples/UserExample'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          readOnly: true
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          writeOnly: true
        createdDate:
          type: string
          format: date
          description: The date that the user was created.
          readOnly: true
      required:
        - id
        - email
        - password
        - createdDate
  parameters:
    userId:
      name: userId
      in: path
      required: true
      description: Id of an existing user.
      schema:
        type: integer
  responses:
    400BadRequest:
      description: Missing required information.
    401Unauthorized:
      description: Unauthorized operation.
  examples:
    UserExample:
      value:
        id: 142
        email: alice.smith@gmail.com
        password: '123456789'
        createdDate: '2020-01-01T00:00:00.000Z'

