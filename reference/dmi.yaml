openapi: 3.0.0
x-stoplight:
  id: 545mk2dwwzqkv
info:
  title: dmi
  version: 0.1.0
servers:
  - url: 'http://localhost:4010'
    description: Local Mock Server
paths:
  /users:
    post:
      summary: Create a user
      operationId: post-users
      description: Create a new User.
      requestBody:
        $ref: './requestBodies/UserCredentialsBody.yaml'
      responses:
        '201':
          $ref: './responses/UserCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Email Already Taken
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
    get:
      summary: List all users
      operationId: get-users
      description: Get all Users.
      responses:
        '200':
          $ref: './responses/UserList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
  /users/{userId}:
    parameters:
      - $ref: './parameters/userId.yaml'
    get:
      summary: Get a user by ID
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      responses:
        '200':
          $ref: './responses/UserFound.yaml'
        '404':
          description: User Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BasicAuth: [ ]
      tags:
        - Admin
  /users/auth:
    post:
      summary: Log in
      operationId: post-users-auth
      description: Login the user with the matching email and password.
      requestBody:
        $ref: './requestBodies/UserCredentialsBody.yaml'
      responses:
        '200':
          $ref: './responses/AuthTokenIssued.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Users
  /users/me:
    get:
      summary: Get user details
      operationId: get-users-me
      description: Retrieve the information of the logged in user.
      responses:
        '200':
          $ref: './responses/UserFound.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Users
  /users/me/password:
    put:
      summary: Change password
      operationId: put-users-me-password
      description: Update the password of the logged in user.
      requestBody:
        $ref: './requestBodies/UserPasswordBody.yaml'
      responses:
        '200':
          description: Password Updated
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Users
  /organizations:
    post:
      summary: Create an organization
      operationId: post-organizations
      description: Create a new Organization.
      requestBody:
        $ref: './requestBodies/OrganizationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrganizationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '409':
          description: Organization name already taken.
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}:
    parameters:
      - $ref: './parameters/organizationId.yaml'
    get:
      summary: Get an organization by ID
      operationId: get-organizations-organizationId
      description: Retrieve the information of the organization with the matching organization ID.
      responses:
        '200':
          $ref: './responses/OrganizationFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /organizations/{organizationId}/keys:
    parameters:
      - $ref: './parameters/organizationId.yaml'
    get:
      summary: Get organization API keys
      operationId: get-organizations-organizationId-keys
      description: Retrieve the API keys of the organization with the matching organization ID.
      responses:
        '200':
          $ref: './responses/OrganizationKeysFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Organizations
    put:
      summary: Regenerate organization API keys
      operationId: put-organizations-organizationId-keys
      description: Regenerate the API keys of the organization with the matching organization ID.
      responses:
        '200':
          $ref: './responses/OrganizationKeysFound.yaml'
        '404':
          description: Organization Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
      tags:
        - Organizations
  /organizations/{organizationId}/members:
    parameters:
      - $ref: './parameters/organizationId.yaml'
    post:
      summary: Add member to an organization
      operationId: post-organizations-organizationId-members
      description: Add a new member to the organization with the matching organization ID.
      requestBody:
        $ref: './requestBodies/OrganizationMemberCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/OrganizationFound.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '404':
          description: Organization Not Found
        '409':
          description: User already a member of the organization.
      security:
        - BearerAuth: [ ]
      tags:
        - Organizations
  /practices:
    post:
      summary: Create a new Practice
      operationId: post-practices
      description: Create a new Practice.
      requestBody:
        $ref: './requestBodies/PracticeCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/PracticeCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
        '409':
          description: Practice name already taken.
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
    get:
      summary: List all practices
      operationId: get-practices
      description: Retrieve all practices.
      responses:
        '200':
          $ref: './responses/PracticeList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
  /practices/{practiceId}:
    parameters:
      - $ref: './parameters/practiceId.yaml'
    get:
      summary: Get a practice by ID
      operationId: get-practices-practiceId
      description: Retrieve the practice with the matching practice ID.
      responses:
        '200':
          $ref: './responses/PracticeFound.yaml'
        '404':
          description: Practice Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
    delete:
      summary: Delete a practice
      operationId: delete-practices-practiceId
      description: Delete the practice with the matching practice ID.
      responses:
        '204':
          description: Practice deleted
        '404':
          description: Practice Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Practices
  /providers:
    get:
      summary: List available diagnostic providers
      operationId: get-providers
      description: Retrieve all available diagnostic providers.
      responses:
        '200':
          $ref: './responses/ProviderList.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}:
    parameters:
      - $ref: './parameters/providerId.yaml'
    get:
      summary: Get a diagnostic provider
      operationId: get-providers-providerId
      description: Retrieve the diagnostic provider with the matching provider ID.
      responses:
        '200':
          $ref: './responses/ProviderFound.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
  /providers/{providerId}/configurations:
    parameters:
      - $ref: './parameters/providerId.yaml'
    get:
      summary: Get the configurations for a provider
      operationId: get-providers-providerId-configurations
      description: Retrieve the configurations for the specified provider.
      responses:
        '200':
          $ref: './responses/ProviderConfigurationList.yaml'
        '404':
          description: Provider Not Found
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
    post:
      summary: Configure a diagnostic provider
      operationId: post-providers-providerId-configurations
      description: Create a new configuration for a diagnostic provider by specifying an options object.
      requestBody:
        $ref: './requestBodies/ProviderConfigurationCreateBody.yaml'
      responses:
        '201':
          $ref: './responses/ProviderConfigurationCreated.yaml'
        '400':
          $ref: './responses/400BadRequest.yaml'
        '401':
          $ref: './responses/401Unauthorized.yaml'
        '403':
          $ref: './responses/403Forbidden.yaml'
      security:
        - BearerAuth: [ ]
          ApiKeyAuth: [ ]
      tags:
        - Providers
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
